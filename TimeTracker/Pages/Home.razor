@page "/"
@inject ILocalStorageService localStorage
<!--Silme-->
@if(deleteConfirm && taskToDelete != null)
{
	<div class="modal-backdrop fade show" style="background:rgba(0,0,0.5);"></div>
	<div class="modal fade show d-block" tabindex="-1" style="display:block">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Görev Sil</h5>
					<button type="button" class="btn-close" @onclick="CancelDelete"></button>
				</div>
				<div class="modal-body">
					<p><strong>"@taskToDelete.Title"</strong> görevini silmek istiyor musun?</p>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn-secondary"@onclick="CancelDelete">İptal</button>
					<button type="button" class="btn-danger" @onclick="ExecuteDelete">Sil</button>
				</div>
			</div>
		</div>
	</div>
}
<!--Düzenleme-->
@if(showEditText && taskToEdit != null)
{
	<div class="modal-backdrop fade show" style="background-color: rgba(0,0,0,0.5);"></div>
	<div class="modal fade show d-block" tabindex="-1" style="display: block;">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Görev Düzenle</h5>
					<button type="button" class="btn-close" @onclick="CancelEdit"></button>
				</div>
				<div class="modal-body">
					<div class="mb-3">
						<label class="form-label">Başlık</label>
						<input type="text" class="form-control" @bind="taskToEdit.Title" />
					</div>
					<div class="mb-3">
						<label class="form-label">Açıklama</label>
						<textarea class="form-control" rows="3" @bind="taskToEdit.Description"></textarea>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" @onclick="CancelEdit">İptal</button>
					<button type="button" class="btn btn-primary" @onclick="SaveEdit">Kaydet</button>
				</div>
			</div>
		</div>
	</div>
}

<!--Sayfa-->
<PageTitle>Time Tracker App</PageTitle>



<h1>Zaman Takip</h1>
<div class="card-body">
	<h3>Yeni Görev Ekle</h3>

	<div class="mb-3">
		<label for="taskTitle" class="form-label">Görev Başlığı</label>
		<input id="taskTitle" type="text" class="form-control"
		@bind="newTask.Title" placeholder="Başlığı Girin" />
	</div>

	<div class="mb-3">
		<label for="taskDescription" class="form-label">Açıklama</label>
		<textarea id="taskDescription" class="form-control" rows="3"
			   @bind="newTask.Description" placeholder="Açıklama Girin"></textarea>
	</div>

	<button class="btn btn-primary" @onclick="AddTask">╬ Görev Ekle</button>
</div>

<div class="mb-3">
	<div class="btn-group" role="group">
		<button type="button" class="btn @(filterStatus =="all" ? "btn-primary" : "btn-outline-primary")"
			@onclick='()=>SetFilter("all")'>
			Tüm Görevler
		</button>
		<button type="button" class="btn @(filterStatus == "active" ? "btn-primary" : "btn-outline-primary")"
				@onclick='() => SetFilter("active")'>
			Devam Eden
		</button>
		<button type="button" class="btn @(filterStatus == "completed" ? "btn-primary" : "btn-outline-primary")"
				@onclick='() => SetFilter("completed")'>
			Sona Ermiş
		</button>
	</div>
</div>

<div class="mt-4">
		<h3>Görevlerim</h3>
	@if (FilteredTasks.Any())
	{
		<div class="row">
			@foreach(var task in FilteredTasks)
			{
				<div class="col-md-6 col-lg-4 mb-3">
					<div class="card">
						<div class="card-body">
							<h5 class="card-title">@task.Title</h5>
							<p class="card-text">@task.Description</p>
							<p class="text-muted">
								<small>Oluşturuldu: @task.CreateDate.ToString("dd.MM.yyyy HH:mm")</small>
							</p>

							<div class="mb-2">
								@if (task.IsRunning == false)
								{
									<button class="btn btn-success btn-sm me-2" @onclick="@(eventArgs => StartTask(task))">
										Başlat
									</button>
								}
								else
								{
									<button class="btn btn-danger btn-sm me-2" @onclick="@(eventArgs => StopTask(task))">
										Durdur
									</button>
								}
							</div>
							<div class="mt-2">
								<button class="btn btn-danger btn-sm" @onclick="()=>DeleteDialog(task)">
									Sil
								</button>
								<button class="btn btn-primary btn-sm me-2" @onclick="() => ShowEditDialogue(task)">
									Düzenle
								</button>
							</div>

							@if (task.IsCompleted)
							{
								<span class="badge bg-secondary">Tamamlandı</span>
							}



							<p class="fw-bold">
								Süre: @task.FormattedTime
							</p>
						</div>
					</div>
					
				</div>
			}
		</div>
	}
</div>

<!--İstatikstikler-->
<div class="row mb-4"v>
	<div class="col-md-3">
		<div class="card bg-primary text-white">
			<div class="card-body text-center">
				<h5 class="card-title">Toplam Görev</h5>
				<h3 class="display-6">@TotalTaskCount</h3>
			</div>
		</div>
	</div>
	<div class="col-md-3">
		<div class="card bg-success text-white">
			<div class="card-body text-center">
				<h5 class="card-title">Aktif Görev</h5>
				<h3 class="display-6">@ActiveTaskCount</h3>
			</div>
		</div>
	</div>
	<div class="col-md-3">
		<div class="card bg-warning text-white">
			<div class="card-body text-center">
				<h5 class="card-title">Bitmiş Görev</h5>
				<h3 class="display-6">@CompletedTasksCount</h3>
			</div>
		</div>
	</div>
	<div class="col-md-3">
		<div class="card bg-info text-white">
			<div class="card-body text-center">
				<h5 class="card-title">Toplam Süre</h5>
				<h3 class="display-6">@($"{TotalTime.Hours:D2}s : {TotalTime.Minutes:D2}dk")</h3>
			</div>
		</div>
	</div>
</div>

<div class="row mb-4">
	<div class="col-md-6">
		<div class="card border-success">
			<div class="card-header bg-success text-white">
				<h5 class="mb-0">Bugün</h5>
			</div>
			<div class="card-body">
				<div class="row">
					<div class="col-6">
						<p class="mb-1"><strong>Görev Sayısı:</strong></p>
						<p class="mb-1"><strong>Toplam Süre:</strong></p>
					</div>
					<div class="col-6 text-end">
						<p class="mb-1">@TodayTasks.Count</p>
						<p class="mb-1">@($"{TodayTotalTime.Hours:D2}s : {TodayTotalTime.Minutes:D2}dk : {TodayTotalTime.Seconds:D2}sn")</p>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="col-md-6">
		<div class="card border-primary">
			<div class="card-header bg-primary text-white">
				<h5 class="mb-0">Bu Hafta</h5>
			</div>
			<div class="card-body">
				<div class="row">
					<div class="col-6">
						<p class="mb-1"><strong>Görev Sayısı:</strong></p>
						<p class="mb-1"><strong>Toplam Süre:</strong></p>
					</div>
					<div class="col-6 text-end">
						<p class="mb-1">@ThisWeekTasks.Count</p>
						<p class="mb-1">@($"{WeekTotalTime.Hours:D2}s : {WeekTotalTime.Minutes:D2}dk : {WeekTotalTime.Seconds:D2}sn")</p>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
@code{
	private TaskItem newTask = new();
	private List<TaskItem> tasks = new();

	protected override async Task OnInitializedAsync()
	{
		await LoadTasksFromStorage();
	}

	private async Task LoadTasksFromStorage()
	{
		try
		{
			var savedTasks = await localStorage.GetItemAsync<List<TaskItem>>("tasks");
			if (savedTasks != null)
			{
				tasks = savedTasks;
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"LocalStorage yükleme hatası: {ex.Message}");
		}
	}

	private async Task SaveTasksToStorage()
	{
		try
		{
			await localStorage.SetItemAsync("tasks", tasks);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"LocalStorage kaydetme hatası: {ex.Message}");
		}
	}
	private async Task SaveData()
	{
		await SaveTasksToStorage();
	}


	private async void AddTask()
	{
		if (string.IsNullOrWhiteSpace(newTask.Title) == false)
		{
			tasks.Add(new TaskItem
				{
					Title = newTask.Title,
					Description = newTask.Description,
					CreateDate = DateTime.Now
				});
		}

		newTask = new();
		await SaveData();
	}

	private async void StartTask(TaskItem task)
	{
		task.StartTime = DateTime.Now;
		task.IsRunning = true;
		task.IsCompleted = false;
		await SaveData();
	}

	private async void StopTask(TaskItem task)
	{
		task.EndTime = DateTime.Now;
		task.IsRunning = false;
		task.IsCompleted = true;
		await SaveData();
	}

	/*Silme İşlemi*/
	private TaskItem taskToDelete;
	private bool deleteConfirm = false;

	private void DeleteDialog(TaskItem task)
	{
		taskToDelete = task;
		deleteConfirm = true;
	}

	private void CancelDelete()
	{
		taskToDelete = null;
		deleteConfirm = false;
	}

	private async void ExecuteDelete()
	{
		if(taskToDelete != null)
		{
			tasks.Remove(taskToDelete);
			taskToDelete = null;
			deleteConfirm = false;
			await SaveData();
		}
	}
	/*Düzenleme İşlemi*/
	private TaskItem taskToEdit;
	private bool showEditText = false;  

	private void ShowEditDialogue(TaskItem task)
	{
		taskToEdit = new TaskItem()
			{
				Id = task.Id,
				Title = task.Title,
				Description = task.Description,
				CreateDate = task.CreateDate,
				StartTime = task.StartTime,
				EndTime = task.EndTime,
				IsRunning = task.IsRunning,
				IsCompleted = task.IsCompleted

			};
		showEditText = true;
	}

	private void CancelEdit()
	{
		taskToEdit = null;
		showEditText = false;
	}

	private async void SaveEdit()
	{
		if (taskToEdit != null)
		{
			var originalTask = tasks.FirstOrDefault(t => t.Id == taskToEdit.Id);
			if (originalTask != null)
			{
				originalTask.Title = taskToEdit.Title;
				originalTask.Description = taskToEdit.Description;
			}
			taskToEdit = null;
			showEditText = false;
			await SaveData();
		}
	}

	/*Filtreleme*/
	private string filterStatus = "all";  

	private List<TaskItem> FilteredTasks
	{
		get
		{
			switch (filterStatus)
			{
				case "active":
					return tasks.Where(t => t.IsRunning == true).ToList();
				case "completed":
					return tasks.Where(t => t.IsCompleted == true).ToList();
				default:
					return tasks;
			}
		}
	}

	private void SetFilter(string filter)
	{
		filterStatus = filter;
	}

	private List<TaskItem> TodayTasks
	{
		get
		{
			DateTime today = DateTime.Today;
			List<TaskItem> todayTasks = new();

			foreach(var task in tasks)
			{
				if (task.CreateDate.Date == today)
				{
					todayTasks.Add(task);
				}
			}
			return todayTasks;
		}
	}

	private List<TaskItem> ThisWeekTasks
	{
		get
		{
			DateTime weekStart = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek);
			DateTime weekEnd = weekStart.AddDays(7);

			List<TaskItem> weekTasks = new();

			foreach (var task in tasks)
			{
				if (task.CreateDate.Date >= weekStart &&  task.CreateDate.Date < weekEnd)
				{
					weekTasks.Add(task);
				}
			}
			return weekTasks;
		}
	}

	/*Toplam Süre ve Görev*/
	private TimeSpan TotalTime
	{
		get
		{
			TimeSpan total = TimeSpan.Zero;
			foreach(var task in tasks)
			{
				total += task.ElapsedTime;
			}
			return total;
		}
	}

	private TimeSpan TodayTotalTime
	{
		get
		{
			TimeSpan total = TimeSpan.Zero;
			foreach (var task in TodayTasks)
			{
				total += task.ElapsedTime;
			}
			return total;
		}
	}
	private TimeSpan WeekTotalTime
	{
		get
		{
			TimeSpan total = TimeSpan.Zero;
			foreach (var task in ThisWeekTasks)
			{
				total += task.ElapsedTime;
			}
			return total;
		}
	}

	private int CompletedTasksCount
	{
		get
		{
			int count = 0;
			foreach (var task in tasks)
			{
				if (task.IsCompleted == true)
				{
					count++;
				}
			}
			return count;
		}
	}

	private int ActiveTaskCount
	{
		get
		{
			int count = 0;
			foreach (var task in tasks)
			{
				if (task.IsRunning == true)
				{
					count++;
				}
			}
			return count;
		}
	}

	private int TotalTaskCount
	{
		get
		{
			return tasks.Count;
		}
	}


}